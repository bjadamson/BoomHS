#pragma once
#include <extlibs/glew.hpp>
#include <stlw/algorithm.hpp>

namespace opengl::debug
{

inline auto const&
attrib_to_string_table()
{
  // clang-format off
  static constexpr auto TABLE = stlw::make_array<std::pair<GLenum, char const*>>(
      std::make_pair(GL_FLOAT,             "GL_FLOAT"),
      std::make_pair(GL_FLOAT_VEC2,        "GL_FLOAT_VEC2"),
      std::make_pair(GL_FLOAT_VEC3,        "GL_FLOAT_VEC3"),
      std::make_pair(GL_FLOAT_VEC4,        "GL_FLOAT_VEC4"),
      std::make_pair(GL_FLOAT_MAT2,        "GL_FLOAT_MAT2"),
      std::make_pair(GL_FLOAT_MAT3,        "GL_FLOAT_MAT"),
      std::make_pair(GL_FLOAT_MAT4,        "GL_FLOAT_MAT4"),
      std::make_pair(GL_FLOAT_MAT2x3,      "GL_FLOAT_MAT2x3"),
      std::make_pair(GL_FLOAT_MAT2x4,      "GL_FLOAT_MAT2x4"),
      std::make_pair(GL_FLOAT_MAT3x2,      "GL_FLOAT_MAT3x2"),
      std::make_pair(GL_FLOAT_MAT3x4,      "GL_FLOAT_MAT3x4"),
      std::make_pair(GL_FLOAT_MAT4x2,      "GL_FLOAT_MAT4x2"),
      std::make_pair(GL_FLOAT_MAT4x3,      "GL_FLOAT_MAT4x3"),
      std::make_pair(GL_INT,               "GL_INT"),
      std::make_pair(GL_INT_VEC2,          "GL_INT_VEC2"),
      std::make_pair(GL_INT_VEC3,          "GL_INT_VEC3"),
      std::make_pair(GL_INT_VEC4,          "GL_INT_VEC4"),
      std::make_pair(GL_UNSIGNED_INT,      "GL_UNSIGNED_INT"),
      std::make_pair(GL_UNSIGNED_INT_VEC2, "GL_UNSIGNED_INT_VEC2"),
      std::make_pair(GL_UNSIGNED_INT_VEC3, "GL_UNSIGNED_INT_VEC3"),
      std::make_pair(GL_UNSIGNED_INT_VEC4, "GL_UNSIGNED_INT_VEC4"),
      std::make_pair(GL_DOUBLE,            "GL_DOUBLE"),
      std::make_pair(GL_DOUBLE_VEC2,       "GL_DOUBLE_VEC2"),
      std::make_pair(GL_DOUBLE_VEC3,       "GL_DOUBLE_VEC3"),
      std::make_pair(GL_DOUBLE_VEC4,       "GL_DOUBLE_VEC4"),
      std::make_pair(GL_DOUBLE_MAT2,       "GL_DOUBLE_MAT2"),
      std::make_pair(GL_DOUBLE_MAT3,       "GL_DOUBLE_MAT3"),
      std::make_pair(GL_DOUBLE_MAT4,       "GL_DOUBLE_MAT4"),
      std::make_pair(GL_DOUBLE_MAT2x3,     "GL_DOUBLE_MAT2x3"),
      std::make_pair(GL_DOUBLE_MAT2x4,     "GL_DOUBLE_MAT2x4"),
      std::make_pair(GL_DOUBLE_MAT3x2,     "GL_DOUBLE_MAT3x2"),
      std::make_pair(GL_DOUBLE_MAT3x4,     "GL_DOUBLE_MAT3x4"),
      std::make_pair(GL_DOUBLE_MAT4x2,     "GL_DOUBLE_MAT4x2"),
      std::make_pair(GL_DOUBLE_MAT4x3,     "GL_DOUBLE_MAT4x3")
  );
  // clang-format on
  return TABLE;
}

inline auto const&
uniform_to_string_table()
{
  using tuple_t = std::tuple<GLenum, char const*, char const*>;
  // clang-format off
  static constexpr auto TABLE = stlw::make_array<tuple_t>(
      //             Symbolic Contant                               (Symbolic Constant String             Shader Uniform Type
      std::make_tuple(GL_FLOAT,                                     "GL_FLOAT",                                     "float"),
      std::make_tuple(GL_FLOAT_VEC2,                                "GL_FLOAT_VEC2",                                "vec2"),
      std::make_tuple(GL_FLOAT_VEC3,                                "GL_FLOAT_VEC3",                                "vec3"),
      std::make_tuple(GL_FLOAT_VEC4,                                "GL_FLOAT_VEC4",                                "vec4"),
      std::make_tuple(GL_DOUBLE,                                    "GL_DOUBLE",                                    "double"),
      std::make_tuple(GL_DOUBLE_VEC2,                               "GL_DOUBLE_VEC2",                               "dvec2"),
      std::make_tuple(GL_DOUBLE_VEC3,                               "GL_DOUBLE_VEC3",                               "dvec3"),
      std::make_tuple(GL_DOUBLE_VEC4,                               "GL_DOUBLE_VEC4",                               "dvec4"),
      std::make_tuple(GL_INT,                                       "GL_INT",                                       "int"),
      std::make_tuple(GL_INT_VEC2,                                  "GL_INT_VEC2",                                  "ivec2"),
      std::make_tuple(GL_INT_VEC3,                                  "GL_INT_VEC3",                                  "ivec3"),
      std::make_tuple(GL_INT_VEC4,                                  "GL_INT_VEC4",                                  "ivec4"),
      std::make_tuple(GL_UNSIGNED_INT,                              "GL_UNSIGNED_INT",                              "unsigned int"),
      std::make_tuple(GL_UNSIGNED_INT_VEC2,                         "GL_UNSIGNED_INT_VEC2",                         "uvec2"),
      std::make_tuple(GL_UNSIGNED_INT_VEC3,                         "GL_UNSIGNED_INT_VEC3",                         "uvec3"),
      std::make_tuple(GL_UNSIGNED_INT_VEC4,                         "GL_UNSIGNED_INT_VEC4",                         "uvec4"),
      std::make_tuple(GL_BOOL,                                      "GL_BOOL",                                      "bool"),
      std::make_tuple(GL_BOOL_VEC2,                                 "GL_BOOL_VEC2",                                 "bvec2"),
      std::make_tuple(GL_BOOL_VEC3,                                 "GL_BOOL_VEC3",                                 "bvec3"),
      std::make_tuple(GL_BOOL_VEC4,                                 "GL_BOOL_VEC4",                                 "bvec4"),
      std::make_tuple(GL_FLOAT_MAT2,                                "GL_FLOAT_MAT2",                                "mat2"),
      std::make_tuple(GL_FLOAT_MAT3,                                "GL_FLOAT_MAT3",                                "mat3"),
      std::make_tuple(GL_FLOAT_MAT4,                                "GL_FLOAT_MAT4",                                "mat4"),
      std::make_tuple(GL_FLOAT_MAT2x3,                              "GL_FLOAT_MAT2x3",                              "mat2x3"),
      std::make_tuple(GL_FLOAT_MAT2x4,                              "GL_FLOAT_MAT2x4",                              "mat2x4"),
      std::make_tuple(GL_FLOAT_MAT3x2,                              "GL_FLOAT_MAT3x2",                              "mat3x2"),
      std::make_tuple(GL_FLOAT_MAT3x4,                              "GL_FLOAT_MAT3x4",                              "mat3x4"),
      std::make_tuple(GL_FLOAT_MAT4x2,                              "GL_FLOAT_MAT4x2",                              "mat4x2"),
      std::make_tuple(GL_FLOAT_MAT4x3,                              "GL_FLOAT_MAT4x3",                              "mat4x3"),
      std::make_tuple(GL_DOUBLE_MAT2,                               "GL_DOUBLE_MAT2",                               "dmat2"),
      std::make_tuple(GL_DOUBLE_MAT3,                               "GL_DOUBLE_MAT3",                               "dmat3"),
      std::make_tuple(GL_DOUBLE_MAT4,                               "GL_DOUBLE_MAT4",                               "dmat4"),
      std::make_tuple(GL_DOUBLE_MAT2x3,                             "GL_DOUBLE_MAT2x3",                             "dmat2x3"),
      std::make_tuple(GL_DOUBLE_MAT2x4,                             "GL_DOUBLE_MAT2x4",                             "dmat2x4"),
      std::make_tuple(GL_DOUBLE_MAT3x2,                             "GL_DOUBLE_MAT3x2",                             "dmat3x2"),
      std::make_tuple(GL_DOUBLE_MAT3x4,                             "GL_DOUBLE_MAT3x4",                             "dmat3x4"),
      std::make_tuple(GL_DOUBLE_MAT4x2,                             "GL_DOUBLE_MAT4x2",                             "dmat4x2"),
      std::make_tuple(GL_DOUBLE_MAT4x3,                             "GL_DOUBLE_MAT4x3",                             "dmat4x3"),
      std::make_tuple(GL_SAMPLER_1D,                                "GL_SAMPLER_1D",                                "sampler1D"),
      std::make_tuple(GL_SAMPLER_2D,                                "GL_SAMPLER_2D",                                "sampler2D"),
      std::make_tuple(GL_SAMPLER_3D,                                "GL_SAMPLER_3D",                                "sampler3D"),
      std::make_tuple(GL_SAMPLER_CUBE,                              "GL_SAMPLER_CUBE",                              "samplerCube"),
      std::make_tuple(GL_SAMPLER_1D_SHADOW,                         "GL_SAMPLER_1D_SHADOW",                         "sampler1DShadow"),
      std::make_tuple(GL_SAMPLER_2D_SHADOW,                         "GL_SAMPLER_2D_SHADOW",                         "sampler2DShadow"),
      std::make_tuple(GL_SAMPLER_1D_ARRAY,                          "GL_SAMPLER_1D_ARRAY",                          "sampler1DArray"),
      std::make_tuple(GL_SAMPLER_2D_ARRAY,                          "GL_SAMPLER_2D_ARRAY",                          "sampler2DArray"),
      std::make_tuple(GL_SAMPLER_1D_ARRAY_SHADOW,                   "GL_SAMPLER_1D_ARRAY_SHADOW",                   "sampler1DArrayShadow"),
      std::make_tuple(GL_SAMPLER_2D_ARRAY_SHADOW,                   "GL_SAMPLER_2D_ARRAY_SHADOW",                   "sampler2DArrayShadow"),
      std::make_tuple(GL_SAMPLER_2D_MULTISAMPLE,                    "GL_SAMPLER_2D_MULTISAMPLE",                    "sampler2DMS"),
      std::make_tuple(GL_SAMPLER_2D_MULTISAMPLE_ARRAY,              "GL_SAMPLER_2D_MULTISAMPLE_ARRAY",              "sampler2DMSArray"),
      std::make_tuple(GL_SAMPLER_CUBE_SHADOW,                       "GL_SAMPLER_CUBE_SHADOW",                       "samplerCubeShadow"),
      std::make_tuple(GL_SAMPLER_BUFFER,                            "GL_SAMPLER_BUFFER",                            "samplerBuffer"),
      std::make_tuple(GL_SAMPLER_2D_RECT,                           "GL_SAMPLER_2D_RECT",                           "sampler2DRect"),
      std::make_tuple(GL_SAMPLER_2D_RECT_SHADOW,                    "GL_SAMPLER_2D_RECT_SHADOW",                    "sampler2DRectShadow"),
      std::make_tuple(GL_INT_SAMPLER_1D,                            "GL_INT_SAMPLER_1D",                            "isampler1D"),
      std::make_tuple(GL_INT_SAMPLER_2D,                            "GL_INT_SAMPLER_2D",                            "isampler2D"),
      std::make_tuple(GL_INT_SAMPLER_3D,                            "GL_INT_SAMPLER_3D",                            "isampler3D"),
      std::make_tuple(GL_INT_SAMPLER_CUBE,                          "GL_INT_SAMPLER_CUBE",                          "isamplerCube"),
      std::make_tuple(GL_INT_SAMPLER_1D_ARRAY,                      "GL_INT_SAMPLER_1D_ARRAY",                      "isampler1DArray"),
      std::make_tuple(GL_INT_SAMPLER_2D_ARRAY,                      "GL_INT_SAMPLER_2D_ARRAY",                      "isampler2DArray"),
      std::make_tuple(GL_INT_SAMPLER_2D_MULTISAMPLE,                "GL_INT_SAMPLER_2D_MULTISAMPLE",                "isampler2DMS"),
      std::make_tuple(GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY,          "GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY",          "isampler2DMSArray"),
      std::make_tuple(GL_INT_SAMPLER_BUFFER,                        "GL_INT_SAMPLER_BUFFER",                        "isamplerBuffer"),
      std::make_tuple(GL_INT_SAMPLER_2D_RECT,                       "GL_INT_SAMPLER_2D_RECT",                       "isampler2DRect"),
      std::make_tuple(GL_UNSIGNED_INT_SAMPLER_1D,                   "GL_UNSIGNED_INT_SAMPLER_1D",                   "usampler1D"),
      std::make_tuple(GL_UNSIGNED_INT_SAMPLER_2D,                   "GL_UNSIGNED_INT_SAMPLER_2D",                   "usampler2D"),
      std::make_tuple(GL_UNSIGNED_INT_SAMPLER_3D,                   "GL_UNSIGNED_INT_SAMPLER_3D",                   "usampler3D"),
      std::make_tuple(GL_UNSIGNED_INT_SAMPLER_CUBE,                 "GL_UNSIGNED_INT_SAMPLER_CUBE",                 "usamplerCube"),
      std::make_tuple(GL_UNSIGNED_INT_SAMPLER_1D_ARRAY,             "GL_UNSIGNED_INT_SAMPLER_1D_ARRAY",             "usampler2DArray"),
      std::make_tuple(GL_UNSIGNED_INT_SAMPLER_2D_ARRAY,             "GL_UNSIGNED_INT_SAMPLER_2D_ARRAY",             "usampler2DArray"),
      std::make_tuple(GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE,       "GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE",       "usampler2DMS"),
      std::make_tuple(GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY, "GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY", "usampler2DMSArray"),
      std::make_tuple(GL_UNSIGNED_INT_SAMPLER_BUFFER,               "GL_UNSIGNED_INT_SAMPLER_BUFFER",               "usamplerBuffer"),
      std::make_tuple(GL_UNSIGNED_INT_SAMPLER_2D_RECT,              "GL_UNSIGNED_INT_SAMPLER_2D_RECT",              "usampler2DRect"),
      std::make_tuple(GL_IMAGE_1D,                                  "GL_IMAGE_1D",                                  "image1D"),
      std::make_tuple(GL_IMAGE_2D,                                  "GL_IMAGE_2D",                                  "image2D"),
      std::make_tuple(GL_IMAGE_3D,                                  "GL_IMAGE_3D",                                  "image3D"),
      std::make_tuple(GL_IMAGE_2D_RECT,                             "GL_IMAGE_2D_RECT",                             "image2DRect"),
      std::make_tuple(GL_IMAGE_CUBE,                                "GL_IMAGE_CUBE",                                "imageCube"),
      std::make_tuple(GL_IMAGE_BUFFER,                              "GL_IMAGE_BUFFER",                              "imageBuffer"),
      std::make_tuple(GL_IMAGE_1D_ARRAY,                            "GL_IMAGE_1D_ARRAY",                            "image1DArray"),
      std::make_tuple(GL_IMAGE_2D_ARRAY,                            "GL_IMAGE_2D_ARRAY",                            "image2DArray"),
      std::make_tuple(GL_IMAGE_2D_MULTISAMPLE,                      "GL_IMAGE_2D_MULTISAMPLE",                      "image2DMS"),
      std::make_tuple(GL_IMAGE_2D_MULTISAMPLE_ARRAY,                "GL_IMAGE_2D_MULTISAMPLE_ARRAY",                "image2DMSArray"),
      std::make_tuple(GL_INT_IMAGE_1D,                              "GL_INT_IMAGE_1D",                              "iimage1D"),
      std::make_tuple(GL_INT_IMAGE_2D,                              "GL_INT_IMAGE_2D",                              "iimage2D"),
      std::make_tuple(GL_INT_IMAGE_3D,                              "GL_INT_IMAGE_3D",                              "iimage3D"),
      std::make_tuple(GL_INT_IMAGE_2D_RECT,                         "GL_INT_IMAGE_2D_RECT",                         "iimage2DRect"),
      std::make_tuple(GL_INT_IMAGE_CUBE,                            "GL_INT_IMAGE_CUBE",                            "iimageCube"),
      std::make_tuple(GL_INT_IMAGE_BUFFER,                          "GL_INT_IMAGE_BUFFER",                          "iimageBuffer"),
      std::make_tuple(GL_INT_IMAGE_1D_ARRAY,                        "GL_INT_IMAGE_1D_ARRAY",                        "iimage1DArray"),
      std::make_tuple(GL_INT_IMAGE_2D_ARRAY,                        "GL_INT_IMAGE_2D_ARRAY",                        "iimage2DArray"),
      std::make_tuple(GL_INT_IMAGE_2D_MULTISAMPLE,                  "GL_INT_IMAGE_2D_MULTISAMPLE",                  "iimage2DMS"),
      std::make_tuple(GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY,            "GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY",            "iimage2DMSArray"),
      std::make_tuple(GL_UNSIGNED_INT_IMAGE_1D,                     "GL_UNSIGNED_INT_IMAGE_1D",                     "uimage1D"),
      std::make_tuple(GL_UNSIGNED_INT_IMAGE_2D,                     "GL_UNSIGNED_INT_IMAGE_2D",                     "uimage2D"),
      std::make_tuple(GL_UNSIGNED_INT_IMAGE_3D,                     "GL_UNSIGNED_INT_IMAGE_3D",                     "uimage3D"),
      std::make_tuple(GL_UNSIGNED_INT_IMAGE_2D_RECT,                "GL_UNSIGNED_INT_IMAGE_2D_RECT",                "uimage2DRect"),
      std::make_tuple(GL_UNSIGNED_INT_IMAGE_CUBE,                   "GL_UNSIGNED_INT_IMAGE_CUBE",                   "uimageCube"),
      std::make_tuple(GL_UNSIGNED_INT_IMAGE_BUFFER,                 "GL_UNSIGNED_INT_IMAGE_BUFFER",                 "uimageBuffer"),
      std::make_tuple(GL_UNSIGNED_INT_IMAGE_1D_ARRAY,               "GL_UNSIGNED_INT_IMAGE_1D_ARRAY",               "uimage1DArray"),
      std::make_tuple(GL_UNSIGNED_INT_IMAGE_2D_ARRAY,               "GL_UNSIGNED_INT_IMAGE_2D_ARRAY",               "uimage2DArray"),
      std::make_tuple(GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE,         "GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE",         "uimage2DMS"),
      std::make_tuple(GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY,   "GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY",   "uimage2DMSArray"),
      std::make_tuple(GL_UNSIGNED_INT_ATOMIC_COUNTER,               "GL_UNSIGNED_INT_ATOMIC_COUNTER",               "atomic_uint")
    );
  // clang-format on
  return TABLE;
}

} // namespace opengl::debug
